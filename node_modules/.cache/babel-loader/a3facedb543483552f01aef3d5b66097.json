{"ast":null,"code":"import { createStore, compose, applyMiddleware } from 'redux';\nimport reduxImmutableStateInvariant from 'redux-immutable-state-invariant';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nfunction configureStoreProd(initialState) {\n  var middlewares = [// Add other middleware on this line...\n  // thunk middleware can also accept an extra argument to be passed to each thunk action\n  // https://github.com/gaearon/redux-thunk#injecting-a-custom-argument\n  thunk];\n  return createStore(rootReducer, initialState, compose(applyMiddleware.apply(void 0, middlewares)));\n}\n\nfunction configureStoreDev(initialState) {\n  var middlewares = [// Add other middleware on this line...\n  // Redux middleware that spits an error on you when you try to mutate your state either inside a dispatch or between dispatches.\n  reduxImmutableStateInvariant(), // thunk middleware can also accept an extra argument to be passed to each thunk action\n  // https://github.com/gaearon/redux-thunk#injecting-a-custom-argument\n  thunk];\n  var composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose; // add support for Redux dev tools\n\n  var store = createStore(rootReducer, initialState, composeEnhancers(applyMiddleware.apply(void 0, middlewares)));\n\n  if (module.hot) {\n    // Enable Webpack hot module replacement for reducers\n    module.hot.accept('../reducers', function () {\n      var nextReducer = require('../reducers').default; // eslint-disable-line global-require\n\n\n      store.replaceReducer(nextReducer);\n    });\n  }\n\n  return store;\n}\n\nvar configureStore = process.env.NODE_ENV === 'production' ? configureStoreProd : configureStoreDev;\nexport default configureStore;","map":{"version":3,"sources":["/Users/chetna/Desktop/Site/my-app/choco-corp/src/store/configureStore.js"],"names":["createStore","compose","applyMiddleware","reduxImmutableStateInvariant","thunk","rootReducer","configureStoreProd","initialState","middlewares","configureStoreDev","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","module","hot","accept","nextReducer","require","default","replaceReducer","configureStore","process","env","NODE_ENV"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,OAArB,EAA8BC,eAA9B,QAAoD,OAApD;AACA,OAAOC,4BAAP,MAAyC,iCAAzC;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,WAAP,MAAwB,aAAxB;;AAEA,SAASC,kBAAT,CAA4BC,YAA5B,EAA0C;AACxC,MAAMC,WAAW,GAAG,CAClB;AAEA;AACA;AACAJ,EAAAA,KALkB,CAApB;AAQA,SAAOJ,WAAW,CAACK,WAAD,EAAcE,YAAd,EAA4BN,OAAO,CACnDC,eAAe,MAAf,SAAmBM,WAAnB,CADmD,CAAnC,CAAlB;AAID;;AAED,SAASC,iBAAT,CAA2BF,YAA3B,EAAyC;AACvC,MAAMC,WAAW,GAAG,CAClB;AAEA;AACAL,EAAAA,4BAA4B,EAJV,EAMlB;AACA;AACAC,EAAAA,KARkB,CAApB;AAWA,MAAMM,gBAAgB,GAAGC,MAAM,CAACC,oCAAP,IAA+CX,OAAxE,CAZuC,CAY0C;;AACjF,MAAMY,KAAK,GAAGb,WAAW,CAACK,WAAD,EAAcE,YAAd,EAA4BG,gBAAgB,CACnER,eAAe,MAAf,SAAmBM,WAAnB,CADmE,CAA5C,CAAzB;;AAKA,MAAIM,MAAM,CAACC,GAAX,EAAgB;AACd;AACAD,IAAAA,MAAM,CAACC,GAAP,CAAWC,MAAX,CAAkB,aAAlB,EAAiC,YAAM;AACrC,UAAMC,WAAW,GAAGC,OAAO,CAAC,aAAD,CAAP,CAAuBC,OAA3C,CADqC,CACe;;;AACpDN,MAAAA,KAAK,CAACO,cAAN,CAAqBH,WAArB;AACD,KAHD;AAID;;AAED,SAAOJ,KAAP;AACD;;AAED,IAAMQ,cAAc,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwClB,kBAAxC,GAA6DG,iBAApF;AAEA,eAAeY,cAAf","sourcesContent":["import {createStore, compose, applyMiddleware} from 'redux';\nimport reduxImmutableStateInvariant from 'redux-immutable-state-invariant';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nfunction configureStoreProd(initialState) {\n  const middlewares = [\n    // Add other middleware on this line...\n\n    // thunk middleware can also accept an extra argument to be passed to each thunk action\n    // https://github.com/gaearon/redux-thunk#injecting-a-custom-argument\n    thunk,\n  ];\n\n  return createStore(rootReducer, initialState, compose(\n    applyMiddleware(...middlewares)\n    )\n  );\n}\n\nfunction configureStoreDev(initialState) {\n  const middlewares = [\n    // Add other middleware on this line...\n\n    // Redux middleware that spits an error on you when you try to mutate your state either inside a dispatch or between dispatches.\n    reduxImmutableStateInvariant(),\n\n    // thunk middleware can also accept an extra argument to be passed to each thunk action\n    // https://github.com/gaearon/redux-thunk#injecting-a-custom-argument\n    thunk,\n  ];\n\n  const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose; // add support for Redux dev tools\n  const store = createStore(rootReducer, initialState, composeEnhancers(\n    applyMiddleware(...middlewares)\n    )\n  );\n\n  if (module.hot) {\n    // Enable Webpack hot module replacement for reducers\n    module.hot.accept('../reducers', () => {\n      const nextReducer = require('../reducers').default; // eslint-disable-line global-require\n      store.replaceReducer(nextReducer);\n    });\n  }\n\n  return store;\n}\n\nconst configureStore = process.env.NODE_ENV === 'production' ? configureStoreProd : configureStoreDev;\n\nexport default configureStore;\n"]},"metadata":{},"sourceType":"module"}